#
# stage0 is a convenience.  We have it set to not run for every MR, but the MR
# will show a button that you can click to start an MR. 
#
# stage1 is done at hip.txcorp.com and is not debug
#
# Goal is to eventually have stages for testing:
#    1. More complete build (with NetCDF, MPI, and HDF5)
#    2. Testing more compilers (Intel, PGI, Cray)
#    3. Higher resolution (make separate stage to save time)
#    4. At NERSC
#    5. At GA with MDS+

stages:
  - stage0
  - stage1
  - stage2

variables:
  GIT_STRATEGY: fetch
  GIT_CLEAN_FLAGS: -ffdxq
  TIMEOUT: 450 seconds


# The most basic template that most tests will expand upon
#

.test-basic:
  interruptible: true
  only:
    refs:
      # Can schedule tests from gitlab interface (CICD -> Schedules)
      - schedules
      # I'm not sure what this does
      - api
      # Can schedule tests from gitlab interface (CICD -> Pipelines -> Run pipeline)
      - web
      # Automatically start things for every MR
      - merge_requests
  dependencies: []
  except:
    variables:
      # I'm not sure what this does
      - $EFIT_CI_SCHEDULED =~ /yes/

pause-for-approval:
  extends: .test-basic
  stage: .pre
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_EVENT_TYPE == "merged_result"
      - $CI_MERGE_REQUEST_EVENT_TYPE == "detached"
  script:
    - echo "pause-for-approval has no script to run"
  variables:
    GIT_STRATEGY: none
  when: manual
  allow_failure: false

.test:
  extends: .test-basic
  after_script:
    - date

clang-docker:
  extends: .test
  stage: stage0
  image: registry.gitlab.com/efit-ai/efitall/clang
  # Note that currently I'm not actually running make test
  script:
    - mkdir build && cd build # Build out of place
    - ../efit/config_cmake_clang.sh | tee config.log
    - make -j4 | tee make.log
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
    - build/*.log
    - build/CMakeCache.txt
    - build/Testing/Temporary/LastTest.log
    expire_in: 4 days

linux-clang:
  extends: .test
  stage: stage1
  tags:
    - name:hip.txcorp_efitai
  script:
    - mkdir build && cd build # Build out of place
    - ../share/config_examples/config_ci_hip.sh | tee config.log
    - make -j4  | tee make.log
    - make test | tee test.log
    - make docs | tee docs.log
    - mv docs/html ../public
  # Include documentation as part of the review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/index.html
  variables:
    PATH: /scratch/soft/bin:/scratch/soft/mpich/bin:/opt/rh/devtoolset-7/root/usr/bin:/usr/bin:/bin
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
    - build/*.log
    - build/CMakeCache.txt
    - build/Testing/Temporary/LastTest.log
    - public
    expire_in: 4 days

#
# Deploy documentation using GitLab pages
#
pages:  # this job name has special meaning to GitLab
  stage: stage2
  tags:
    - name:hip.txcorp_efitai
  interruptible: true
  variables:
    PATH: /scratch/soft/bin:/scratch/soft/mpich/bin:/opt/rh/devtoolset-7/root/usr/bin:/usr/bin:/bin
  script:
    - source /scratch/soft/sphinx_load.sh
    - mkdir build-docs && cd build-docs # Build out of place
    - ../share/config_examples/config_ci_hip.sh | tee config.log
    - make docs
    - mv docs/html ../public
  artifacts:
    paths:
      - public
  except:
    variables:
      - $EFIT_CI_SCHEDULED =~ /yes/

build-nersc-image:
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/nersc:$CI_COMMIT_REF_SLUG
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
    HARBOR_IMAGE_NAME: $HARBOR_HOST/$HARBOR_PROJECT/efit:latest
  rules:
    - when: manual
  stage: stage2
  image: docker:24.0.5
  before_script:
    - docker info
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $HARBOR_HOST
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo 'CI Registry Image $CI_REGISTRY_IMAGE'
    - echo "CI Commit Ref Slug $CI_COMMIT_REF_SLUG"
    - echo "CI Registry User  $CI_REGISTRY_USER"
    - echo "CI Registry  $CI_REGISTRY"
    - echo "Harbor image name $HARBOR_IMAGE_NAME"
    - pwd
    - cd ..
    - docker build --pull -t $CONTAINER_TEST_IMAGE -f efit/share/config_examples/nersc.Containerfile .
    - docker push $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $HARBOR_IMAGE_NAME
    - docker push $HARBOR_IMAGE_NAME
