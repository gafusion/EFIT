*DECK DLNREL
      REAL*8 FUNCTION DLNREL (X)
C***BEGIN PROLOGUE  DLNREL
C***PURPOSE  Evaluate ln(1+X) accurate in the sense of relative error.
C***LIBRARY   SLATEC (FNLIB)
C***CATEGORY  C4B
C***TYPE      REAL*8 (ALNREL-S, DLNREL-D, CLNREL-C)
C***KEYWORDS  ELEMENTARY FUNCTIONS, FNLIB, LOGARITHM
C***AUTHOR  Fullerton, W., (LANL)
C***DESCRIPTION
C
C DLNREL(X) calculates the double precision natural logarithm of
C (1.0+X) for double precision argument X.  This routine should
C be used when X is small and accurate to calculate the logarithm
C accurately (in the relative error sense) in the neighborhood
C of 1.0.
C
C Series for ALNR       on the interval -3.75000E-01 to  3.75000E-01
C                                        with weighted error   6.35E-32
C                                         log weighted error  31.20
C                               significant figures required  30.93
C                                    decimal places required  32.01
C
C***REFERENCES  (NONE)
C***ROUTINES CALLED  D1MACH, DCSEVL, INITDS, XERMSG
C***REVISION HISTORY  (YYMMDD)
C   770601  DATE WRITTEN
C   890531  Changed all specific intrinsics to generic.  (WRB)
C   890531  REVISION DATE from Version 3.2
C   891214  Prologue converted to Version 4.0 format.  (BAB)
C   900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ)
C***END PROLOGUE  DLNREL
C============
C idecl:  explicitize implicit INTEGER declarations:
      IMPLICIT NONE
      integer, parameter :: r8 = selected_real_kind(12,100)
      INTEGER nlnrel,initds
C============
      REAL*8 ALNRCS(43), X, XMIN,  DCSEVL, D1MACH
      LOGICAL FIRST
      SAVE ALNRCS, NLNREL, XMIN, FIRST
      DATA ALNRCS(  1) / +.10378693562743769800686267719098E+1_r8/
      DATA ALNRCS(  2) / -.13364301504908918098766041553133E+0_r8/
      DATA ALNRCS(  3) / +.19408249135520563357926199374750E-1_r8/
      DATA ALNRCS(  4) / -.30107551127535777690376537776592E-2_r8/
      DATA ALNRCS(  5) / +.48694614797154850090456366509137E-3_r8/
      DATA ALNRCS(  6) / -.81054881893175356066809943008622E-4_r8/
      DATA ALNRCS(  7) / +.13778847799559524782938251496059E-4_r8/
      DATA ALNRCS(  8) / -.23802210894358970251369992914935E-5_r8/
      DATA ALNRCS(  9) / +.41640416213865183476391859901989E-6_r8/
      DATA ALNRCS( 10) / -.73595828378075994984266837031998E-7_r8/
      DATA ALNRCS( 11) / +.13117611876241674949152294345011E-7_r8/
      DATA ALNRCS( 12) / -.23546709317742425136696092330175E-8_r8/
      DATA ALNRCS( 13) / +.42522773276034997775638052962567E-9_r8/
      DATA ALNRCS( 14) / -.77190894134840796826108107493300E-10_r8/
      DATA ALNRCS( 15) / +.14075746481359069909215356472191E-10_r8/
      DATA ALNRCS( 16) / -.25769072058024680627537078627584E-11_r8/
      DATA ALNRCS( 17) / +.47342406666294421849154395005938E-12_r8/
      DATA ALNRCS( 18) / -.87249012674742641745301263292675E-13_r8/
      DATA ALNRCS( 19) / +.16124614902740551465739833119115E-13_r8/
      DATA ALNRCS( 20) / -.29875652015665773006710792416815E-14_r8/
      DATA ALNRCS( 21) / +.55480701209082887983041321697279E-15_r8/
      DATA ALNRCS( 22) / -.10324619158271569595141333961932E-15_r8/
      DATA ALNRCS( 23) / +.19250239203049851177878503244868E-16_r8/
      DATA ALNRCS( 24) / -.35955073465265150011189707844266E-17_r8/
      DATA ALNRCS( 25) / +.67264542537876857892194574226773E-18_r8/
      DATA ALNRCS( 26) / -.12602624168735219252082425637546E-18_r8/
      DATA ALNRCS( 27) / +.23644884408606210044916158955519E-19_r8/
      DATA ALNRCS( 28) / -.44419377050807936898878389179733E-20_r8/
      DATA ALNRCS( 29) / +.83546594464034259016241293994666E-21_r8/
      DATA ALNRCS( 30) / -.15731559416479562574899253521066E-21_r8/
      DATA ALNRCS( 31) / +.29653128740247422686154369706666E-22_r8/
      DATA ALNRCS( 32) / -.55949583481815947292156013226666E-23_r8/
      DATA ALNRCS( 33) / +.10566354268835681048187284138666E-23_r8/
      DATA ALNRCS( 34) / -.19972483680670204548314999466666E-24_r8/
      DATA ALNRCS( 35) / +.37782977818839361421049855999999E-25_r8/
      DATA ALNRCS( 36) / -.71531586889081740345038165333333E-26_r8/
      DATA ALNRCS( 37) / +.13552488463674213646502024533333E-26_r8/
      DATA ALNRCS( 38) / -.25694673048487567430079829333333E-27_r8/
      DATA ALNRCS( 39) / +.48747756066216949076459519999999E-28_r8/
      DATA ALNRCS( 40) / -.92542112530849715321132373333333E-29_r8/
      DATA ALNRCS( 41) / +.17578597841760239233269760000000E-29_r8/
      DATA ALNRCS( 42) / -.33410026677731010351377066666666E-30_r8/
      DATA ALNRCS( 43) / +.63533936180236187354180266666666E-31_r8/
      DATA FIRST /.TRUE./
C***FIRST EXECUTABLE STATEMENT  DLNREL
      IF (FIRST) THEN
         NLNREL = INITDS (ALNRCS, 43, 0.1_r8*real(D1MACH(3),r8))
         XMIN = -1.0_r8+ SQRT(D1MACH(4))
      ENDIF
      FIRST = .FALSE.
C
      IF (X .LE. (-1._r8))
     +   CALL XERMSG ('SLATEC', 'DLNREL', 'X IS LE -1', 2, 2)
      IF (X .LT. XMIN) CALL XERMSG ('SLATEC', 'DLNREL',
     +   'ANSWER LT HALF PRECISION BECAUSE X TOO NEAR -1', 1, 1)
C
      IF (ABS(X).LE.0.375_r8) DLNREL = X*(1._r8-
     1  X*DCSEVL (X/.375_r8, ALNRCS, NLNREL))
C
      IF (ABS(X).GT.0.375_r8) DLNREL = LOG (1.0_r8+X)
C
      RETURN
      END
! 22Jun2000 fgtok -s r8_precision.sub "r8con.csh conversion"
! 22Jun2000 fgtok
! 22Jun2000 fgtok
! 22Jun2000 fgtok
