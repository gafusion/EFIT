*DECK DGAMMA
      REAL*8 FUNCTION DGAMMA (X)
C***BEGIN PROLOGUE  DGAMMA
C***PURPOSE  Compute the complete Gamma function.
C***LIBRARY   SLATEC (FNLIB)
C***CATEGORY  C7A
C***TYPE      REAL*8 (GAMMA-S, DGAMMA-D, CGAMMA-C)
C***KEYWORDS  COMPLETE GAMMA FUNCTION, FNLIB, SPECIAL FUNCTIONS
C***AUTHOR  Fullerton, W., (LANL)
C***DESCRIPTION
C
C DGAMMA(X) calculates the double precision complete Gamma function
C for double precision argument X.
C
C Series for GAM        on the interval  0.          to  1.00000E+00
C                                        with weighted error   5.79E-32
C                                         log weighted error  31.24
C                               significant figures required  30.00
C                                    decimal places required  32.05
C
C***REFERENCES  (NONE)
C***ROUTINES CALLED  D1MACH, D9LGMC, DCSEVL, DGAMLM, INITDS, XERMSG
C***REVISION HISTORY  (YYMMDD)
C   770601  DATE WRITTEN
C   890531  Changed all specific intrinsics to generic.  (WRB)
C   890911  Removed unnecessary intrinsics.  (WRB)
C   890911  REVISION DATE from Version 3.2
C   891214  Prologue converted to Version 4.0 format.  (BAB)
C   900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ)
C   920618  Removed space from variable name.  (RWC, WRB)
C***END PROLOGUE  DGAMMA
C============
C idecl:  explicitize implicit INTEGER declarations:
      IMPLICIT NONE
      integer, parameter :: r8 = selected_real_kind(12,100)
      INTEGER ngam,initds,n,i
C============
      REAL*8 X, GAMCS(42), DXREL, PI, SINPIY, SQ2PIL, XMAX,
     1  XMIN, Y, D9LGMC, DCSEVL, D1MACH
      LOGICAL FIRST
C
      SAVE GAMCS, PI, SQ2PIL, NGAM, XMIN, XMAX, DXREL, FIRST
      DATA GAMCS(  1) / +.8571195590989331421920062399942E-2_r8/
      DATA GAMCS(  2) / +.4415381324841006757191315771652E-2_r8/
      DATA GAMCS(  3) / +.5685043681599363378632664588789E-1_r8/
      DATA GAMCS(  4) / -.4219835396418560501012500186624E-2_r8/
      DATA GAMCS(  5) / +.1326808181212460220584006796352E-2_r8/
      DATA GAMCS(  6) / -.1893024529798880432523947023886E-3_r8/
      DATA GAMCS(  7) / +.3606925327441245256578082217225E-4_r8/
      DATA GAMCS(  8) / -.6056761904460864218485548290365E-5_r8/
      DATA GAMCS(  9) / +.1055829546302283344731823509093E-5_r8/
      DATA GAMCS( 10) / -.1811967365542384048291855891166E-6_r8/
      DATA GAMCS( 11) / +.3117724964715322277790254593169E-7_r8/
      DATA GAMCS( 12) / -.5354219639019687140874081024347E-8_r8/
      DATA GAMCS( 13) / +.9193275519859588946887786825940E-9_r8/
      DATA GAMCS( 14) / -.1577941280288339761767423273953E-9_r8/
      DATA GAMCS( 15) / +.2707980622934954543266540433089E-10_r8/
      DATA GAMCS( 16) / -.4646818653825730144081661058933E-11_r8/
      DATA GAMCS( 17) / +.7973350192007419656460767175359E-12_r8/
      DATA GAMCS( 18) / -.1368078209830916025799499172309E-12_r8/
      DATA GAMCS( 19) / +.2347319486563800657233471771688E-13_r8/
      DATA GAMCS( 20) / -.4027432614949066932766570534699E-14_r8/
      DATA GAMCS( 21) / +.6910051747372100912138336975257E-15_r8/
      DATA GAMCS( 22) / -.1185584500221992907052387126192E-15_r8/
      DATA GAMCS( 23) / +.2034148542496373955201026051932E-16_r8/
      DATA GAMCS( 24) / -.3490054341717405849274012949108E-17_r8/
      DATA GAMCS( 25) / +.5987993856485305567135051066026E-18_r8/
      DATA GAMCS( 26) / -.1027378057872228074490069778431E-18_r8/
      DATA GAMCS( 27) / +.1762702816060529824942759660748E-19_r8/
      DATA GAMCS( 28) / -.3024320653735306260958772112042E-20_r8/
      DATA GAMCS( 29) / +.5188914660218397839717833550506E-21_r8/
      DATA GAMCS( 30) / -.8902770842456576692449251601066E-22_r8/
      DATA GAMCS( 31) / +.1527474068493342602274596891306E-22_r8/
      DATA GAMCS( 32) / -.2620731256187362900257328332799E-23_r8/
      DATA GAMCS( 33) / +.4496464047830538670331046570666E-24_r8/
      DATA GAMCS( 34) / -.7714712731336877911703901525333E-25_r8/
      DATA GAMCS( 35) / +.1323635453126044036486572714666E-25_r8/
      DATA GAMCS( 36) / -.2270999412942928816702313813333E-26_r8/
      DATA GAMCS( 37) / +.3896418998003991449320816639999E-27_r8/
      DATA GAMCS( 38) / -.6685198115125953327792127999999E-28_r8/
      DATA GAMCS( 39) / +.1146998663140024384347613866666E-28_r8/
      DATA GAMCS( 40) / -.1967938586345134677295103999999E-29_r8/
      DATA GAMCS( 41) / +.3376448816585338090334890666666E-30_r8/
      DATA GAMCS( 42) / -.5793070335782135784625493333333E-31_r8/
      DATA PI / 3.14159265358979323846264338327950_r8/
      DATA SQ2PIL / 0.91893853320467274178032973640562_r8/
      DATA FIRST /.TRUE./
C***FIRST EXECUTABLE STATEMENT  DGAMMA
      IF (FIRST) THEN
         NGAM = INITDS (GAMCS, 42, 0.1_r8*real(D1MACH(3),r8) )
C
         CALL DGAMLM (XMIN, XMAX)
         DXREL = SQRT(D1MACH(4))
      ENDIF
      FIRST = .FALSE.
C
      Y = ABS(X)
      IF (Y.GT.10._r8) GO TO 50
C
C COMPUTE GAMMA(X) FOR -XBND .LE. X .LE. XBND.  REDUCE INTERVAL AND FIND
C GAMMA(1+Y) FOR 0.0 .LE. Y .LT. 1.0 FIRST OF ALL.
C
      N = X
      IF (X.LT.0._r8) N = N - 1
      Y = X - N
      N = N - 1
      DGAMMA = 0.9375_r8+
     >   DCSEVL (2._r8*Y-1._r8, GAMCS, NGAM)
      IF (N.EQ.0) RETURN
C
      IF (N.GT.0) GO TO 30
C
C COMPUTE GAMMA(X) FOR X .LT. 1.0
C
      N = -N
      IF (X .EQ. 0._r8)
     +   CALL XERMSG ('SLATEC', 'DGAMMA', 'X IS 0', 4, 2)
      IF (X .LT. 0.0_r8.AND. X+N-2 .EQ. 0._r8)
     +   CALL XERMSG ('SLATEC',
     +   'DGAMMA', 'X IS A NEGATIVE INTEGER', 4, 2)
      IF (X .LT. (-0.5_r8) .AND.
     +   ABS((X-AINT(X-0.5_r8))/X) .LT. DXREL)
     +   CALL XERMSG ('SLATEC', 'DGAMMA',
     +   'ANSWER LT HALF PRECISION BECAUSE X TOO NEAR NEGATIVE INTEGER',
     +   1, 1)
C
      DO 20 I=1,N
        DGAMMA = DGAMMA/(X+I-1 )
 20   CONTINUE
      RETURN
C
C GAMMA(X) FOR X .GE. 2.0 AND X .LE. 10.0
C
 30   DO 40 I=1,N
        DGAMMA = (Y+I) * DGAMMA
 40   CONTINUE
      RETURN
C
C GAMMA(X) FOR ABS(X) .GT. 10.0.  RECALL Y = ABS(X).
C
 50   IF (X .GT. XMAX) CALL XERMSG ('SLATEC', 'DGAMMA',
     +   'X SO BIG GAMMA OVERFLOWS', 3, 2)
C
      DGAMMA = 0._r8
      IF (X .LT. XMIN) CALL XERMSG ('SLATEC', 'DGAMMA',
     +   'X SO SMALL GAMMA UNDERFLOWS', 2, 1)
      IF (X.LT.XMIN) RETURN
C
      DGAMMA = EXP ((Y-0.5_r8)*LOG(Y) - Y + SQ2PIL + D9LGMC(Y) )
      IF (X.GT.0._r8) RETURN
C
      IF (ABS((X-AINT(X-0.5_r8))/X) .LT. DXREL)
     +   CALL XERMSG ('SLATEC', 'DGAMMA',
     +   'ANSWER LT HALF PRECISION, X TOO NEAR NEGATIVE INTEGER', 1, 1)
C
      SINPIY = SIN (PI*Y)
      IF (SINPIY .EQ. 0._r8) CALL XERMSG ('SLATEC', 'DGAMMA',
     +   'X IS A NEGATIVE INTEGER', 4, 2)
C
      DGAMMA = -PI/(Y*SINPIY*DGAMMA)
C
      RETURN
      END
! 22Jun2000 fgtok -s r8_precision.sub "r8con.csh conversion"
! 22Jun2000 fgtok
! 22Jun2000 fgtok
! 22Jun2000 fgtok
