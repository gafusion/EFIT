*DECK DFAC
      REAL*8 FUNCTION DFAC (N)
C***BEGIN PROLOGUE  DFAC
C***PURPOSE  Compute the factorial function.
C***LIBRARY   SLATEC (FNLIB)
C***CATEGORY  C1
C***TYPE      REAL*8 (FAC-S, DFAC-D)
C***KEYWORDS  FACTORIAL, FNLIB, SPECIAL FUNCTIONS
C***AUTHOR  Fullerton, W., (LANL)
C***DESCRIPTION
C
C DFAC(N) calculates the double precision factorial for integer
C argument N.
C
C***REFERENCES  (NONE)
C***ROUTINES CALLED  D9LGMC, DGAMLM, XERMSG
C***REVISION HISTORY  (YYMMDD)
C   770601  DATE WRITTEN
C   890531  Changed all specific intrinsics to generic.  (WRB)
C   890531  REVISION DATE from Version 3.2
C   891214  Prologue converted to Version 4.0 format.  (BAB)
C   900315  CALLs to XERROR changed to CALLs to XERMSG.  (THJ)
C***END PROLOGUE  DFAC
C============
C idecl:  explicitize implicit INTEGER declarations:
      IMPLICIT NONE
      integer, parameter :: r8 = selected_real_kind(12,100)
      INTEGER n,nmax
C============
      REAL*8 FACN(31), SQ2PIL, X, XMAX, XMIN,  D9LGMC
      SAVE FACN, SQ2PIL, NMAX
      DATA FACN  (  1) / +.100000000000000000000000000000000E+1_r8/
      DATA FACN  (  2) / +.100000000000000000000000000000000E+1_r8/
      DATA FACN  (  3) / +.200000000000000000000000000000000E+1_r8/
      DATA FACN  (  4) / +.600000000000000000000000000000000E+1_r8/
      DATA FACN  (  5) / +.240000000000000000000000000000000E+2_r8/
      DATA FACN  (  6) / +.120000000000000000000000000000000E+3_r8/
      DATA FACN  (  7) / +.720000000000000000000000000000000E+3_r8/
      DATA FACN  (  8) / +.504000000000000000000000000000000E+4_r8/
      DATA FACN  (  9) / +.403200000000000000000000000000000E+5_r8/
      DATA FACN  ( 10) / +.362880000000000000000000000000000E+6_r8/
      DATA FACN  ( 11) / +.362880000000000000000000000000000E+7_r8/
      DATA FACN  ( 12) / +.399168000000000000000000000000000E+8_r8/
      DATA FACN  ( 13) / +.479001600000000000000000000000000E+9_r8/
      DATA FACN  ( 14) / +.622702080000000000000000000000000E+10_r8/
      DATA FACN  ( 15) / +.871782912000000000000000000000000E+11_r8/
      DATA FACN  ( 16) / +.130767436800000000000000000000000E+13_r8/
      DATA FACN  ( 17) / +.209227898880000000000000000000000E+14_r8/
      DATA FACN  ( 18) / +.355687428096000000000000000000000E+15_r8/
      DATA FACN  ( 19) / +.640237370572800000000000000000000E+16_r8/
      DATA FACN  ( 20) / +.121645100408832000000000000000000E+18_r8/
      DATA FACN  ( 21) / +.243290200817664000000000000000000E+19_r8/
      DATA FACN  ( 22) / +.510909421717094400000000000000000E+20_r8/
      DATA FACN  ( 23) / +.112400072777760768000000000000000E+22_r8/
      DATA FACN  ( 24) / +.258520167388849766400000000000000E+23_r8/
      DATA FACN  ( 25) / +.620448401733239439360000000000000E+24_r8/
      DATA FACN  ( 26) / +.155112100433309859840000000000000E+26_r8/
      DATA FACN  ( 27) / +.403291461126605635584000000000000E+27_r8/
      DATA FACN  ( 28) / +.108888694504183521607680000000000E+29_r8/
      DATA FACN  ( 29) / +.304888344611713860501504000000000E+30_r8/
      DATA FACN  ( 30) / +.884176199373970195454361600000000E+31_r8/
      DATA FACN  ( 31) / +.265252859812191058636308480000000E+33_r8/
      DATA SQ2PIL / 0.91893853320467274178032973640562_r8/
      DATA NMAX / 0 /
C***FIRST EXECUTABLE STATEMENT  DFAC
      IF (NMAX.NE.0) GO TO 10
      CALL DGAMLM (XMIN, XMAX)
      NMAX = XMAX - 1._r8
C
 10   IF (N .LT. 0) CALL XERMSG ('SLATEC', 'DFAC',
     +   'FACTORIAL OF NEGATIVE INTEGER UNDEFINED', 1, 2)
C
      IF (N.LE.30) DFAC = FACN(N+1)
      IF (N.LE.30) RETURN
C
      IF (N .GT. NMAX) CALL XERMSG ('SLATEC', 'DFAC',
     +   'N SO BIG FACTORIAL(N) OVERFLOWS', 2, 2)
C
      X = N + 1
      DFAC = EXP ((X-0.5_r8)*LOG(X) - X + SQ2PIL + D9LGMC(X) )
C
      RETURN
      END
! 22Jun2000 fgtok -s r8_precision.sub "r8con.csh conversion"
! 22Jun2000 fgtok
