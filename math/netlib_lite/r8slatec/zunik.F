*DECK ZUNIK
      SUBROUTINE ZUNIK (ZRR, ZRI, FNU, IKFLG, IPMTR, TOL, INIT, PHIR,
     +   PHII, ZETA1R, ZETA1I, ZETA2R, ZETA2I, SUMR, SUMI, CWRKR, CWRKI)
C***BEGIN PROLOGUE  ZUNIK
C***SUBSIDIARY
C***PURPOSE  Subsidiary to ZBESI and ZBESK
C***LIBRARY   SLATEC
C***TYPE      ALL (CUNIK-A, ZUNIK-A)
C***AUTHOR  Amos, D. E., (SNL)
C***DESCRIPTION
C
C        ZUNIK COMPUTES PARAMETERS FOR THE UNIFORM ASYMPTOTIC
C        EXPANSIONS OF THE I AND K FUNCTIONS ON IKFLG= 1 OR 2
C        RESPECTIVELY BY
C
C        W(FNU,ZR) = PHI*EXP(ZETA)*SUM
C
C        WHERE       ZETA=-ZETA1 + ZETA2       OR
C                          ZETA1 - ZETA2
C
C        THE FIRST CALL MUST HAVE INIT=0. SUBSEQUENT CALLS WITH THE
C        SAME ZR AND FNU WILL RETURN THE I OR K FUNCTION ON IKFLG=
C        1 OR 2 WITH NO CHANGE IN INIT. CWRK IS A COMPLEX WORK
C        ARRAY. IPMTR=0 COMPUTES ALL PARAMETERS. IPMTR=1 COMPUTES PHI,
C        ZETA1,ZETA2.
C
C***SEE ALSO  ZBESI, ZBESK
C***ROUTINES CALLED  D1MACH, ZDIV, ZLOG, ZSQRT
C***REVISION HISTORY  (YYMMDD)
C   830501  DATE WRITTEN
C   910415  Prologue converted to Version 4.0 format.  (BAB)
C   930122  Added EXTERNAL statement with ZLOG and ZSQRT.  (RWC)
C***END PROLOGUE  ZUNIK
C     COMPLEX CFN,CON,CONE,CRFN,CWRK,CZERO,PHI,S,SR,SUM,T,T2,ZETA1,
C    *ZETA2,ZN,ZR
      IMPLICIT NONE
      integer, parameter :: r8 = selected_real_kind(12,100)
      REAL*8 AC, C, CON, CONEI, CONER, CRFNI, CRFNR, CWRKI,
     * CWRKR, FNU, PHII, PHIR, RFN, SI, SR, SRI, SRR, STI, STR, SUMI,
     * SUMR, TEST, TI, TOL, TR, T2I, T2R, ZEROI, ZEROR, ZETA1I, ZETA1R,
     * ZETA2I, ZETA2R, ZNI, ZNR, ZRI, ZRR, D1MACH
      INTEGER I, IDUM, IKFLG, INIT, IPMTR, J, K, L
      DIMENSION C(120), CWRKR(16), CWRKI(16), CON(2)
      EXTERNAL ZLOG, ZSQRT
      DATA ZEROR,ZEROI,CONER,CONEI
     >   / 0.0_r8, 0.0_r8, 1.0_r8, 0.0_r8/
      DATA CON(1), CON(2)  /
     1 3.98942280401432678E-01_r8,  1.25331413731550025E00_r8/
      DATA C(1), C(2), C(3), C(4), C(5), C(6), C(7), C(8), C(9), C(10),
     1     C(11), C(12), C(13), C(14), C(15), C(16), C(17), C(18),
     2     C(19), C(20), C(21), C(22), C(23), C(24)/
     3   1.00000000000000000E00_r8,-2.08333333333333333E-01_r8,
     4   1.25000000000000000E-01_r8, 3.34201388888888889E-01_r8,
     5  -4.01041666666666667E-01_r8, 7.03125000000000000E-02_r8,
     6  -1.02581259645061728E00_r8, 1.84646267361111111E00_r8,
     7  -8.91210937500000000E-01_r8, 7.32421875000000000E-02_r8,
     8   4.66958442342624743E00_r8,-1.12070026162229938E01_r8,
     9   8.78912353515625000E00_r8,-2.36408691406250000E00_r8,
     A   1.12152099609375000E-01_r8,-2.82120725582002449E01_r8,
     B   8.46362176746007346E01_r8,-9.18182415432400174E01_r8,
     C   4.25349987453884549E01_r8,-7.36879435947963170E00_r8,
     D   2.27108001708984375E-01_r8, 2.12570130039217123E02_r8,
     E  -7.65252468141181642E02_r8, 1.05999045252799988E03_r8/
      DATA C(25), C(26), C(27), C(28), C(29), C(30), C(31), C(32),
     1     C(33), C(34), C(35), C(36), C(37), C(38), C(39), C(40),
     2     C(41), C(42), C(43), C(44), C(45), C(46), C(47), C(48)/
     3  -6.99579627376132541E02_r8, 2.18190511744211590E02_r8,
     4  -2.64914304869515555E01_r8, 5.72501420974731445E-01_r8,
     5  -1.91945766231840700E03_r8, 8.06172218173730938E03_r8,
     6  -1.35865500064341374E04_r8, 1.16553933368645332E04_r8,
     7  -5.30564697861340311E03_r8, 1.20090291321635246E03_r8,
     8  -1.08090919788394656E02_r8, 1.72772750258445740E00_r8,
     9   2.02042913309661486E04_r8,-9.69805983886375135E04_r8,
     A   1.92547001232531532E05_r8,-2.03400177280415534E05_r8,
     B   1.22200464983017460E05_r8,-4.11926549688975513E04_r8,
     C   7.10951430248936372E03_r8,-4.93915304773088012E02_r8,
     D   6.07404200127348304E00_r8,-2.42919187900551333E05_r8,
     E   1.31176361466297720E06_r8,-2.99801591853810675E06_r8/
      DATA C(49), C(50), C(51), C(52), C(53), C(54), C(55), C(56),
     1     C(57), C(58), C(59), C(60), C(61), C(62), C(63), C(64),
     2     C(65), C(66), C(67), C(68), C(69), C(70), C(71), C(72)/
     3   3.76327129765640400E06_r8,-2.81356322658653411E06_r8,
     4   1.26836527332162478E06_r8,-3.31645172484563578E05_r8,
     5   4.52187689813627263E04_r8,-2.49983048181120962E03_r8,
     6   2.43805296995560639E01_r8, 3.28446985307203782E06_r8,
     7  -1.97068191184322269E07_r8, 5.09526024926646422E07_r8,
     8  -7.41051482115326577E07_r8, 6.63445122747290267E07_r8,
     9  -3.75671766607633513E07_r8, 1.32887671664218183E07_r8,
     A  -2.78561812808645469E06_r8, 3.08186404612662398E05_r8,
     B  -1.38860897537170405E04_r8, 1.10017140269246738E02_r8,
     C  -4.93292536645099620E07_r8, 3.25573074185765749E08_r8,
     D  -9.39462359681578403E08_r8, 1.55359689957058006E09_r8,
     E  -1.62108055210833708E09_r8, 1.10684281682301447E09_r8/
      DATA C(73), C(74), C(75), C(76), C(77), C(78), C(79), C(80),
     1   C(81), C(82), C(83), C(84), C(85), C(86), C(87), C(88),
     2   C(89), C(90), C(91), C(92), C(93), C(94), C(95), C(96)/
     3  -4.95889784275030309E08_r8, 1.42062907797533095E08_r8,
     4  -2.44740627257387285E07_r8, 2.24376817792244943E06_r8,
     5  -8.40054336030240853E04_r8, 5.51335896122020586E02_r8,
     6   8.14789096118312115E08_r8,-5.86648149205184723E09_r8,
     7   1.86882075092958249E10_r8,-3.46320433881587779E10_r8,
     8   4.12801855797539740E10_r8,-3.30265997498007231E10_r8,
     9   1.79542137311556001E10_r8,-6.56329379261928433E09_r8,
     A   1.55927986487925751E09_r8,-2.25105661889415278E08_r8,
     B   1.73951075539781645E07_r8,-5.49842327572288687E05_r8,
     C   3.03809051092238427E03_r8,-1.46792612476956167E10_r8,
     D   1.14498237732025810E11_r8,-3.99096175224466498E11_r8,
     E   8.19218669548577329E11_r8,-1.09837515608122331E12_r8/
      DATA C(97), C(98), C(99), C(100), C(101), C(102), C(103), C(104),
     1     C(105), C(106), C(107), C(108), C(109), C(110), C(111),
     2     C(112), C(113), C(114), C(115), C(116), C(117), C(118)/
     3   1.00815810686538209E12_r8,-6.45364869245376503E11_r8,
     4   2.87900649906150589E11_r8,-8.78670721780232657E10_r8,
     5   1.76347306068349694E10_r8,-2.16716498322379509E09_r8,
     6   1.43157876718888981E08_r8,-3.87183344257261262E06_r8,
     7   1.82577554742931747E04_r8, 2.86464035717679043E11_r8,
     8  -2.40629790002850396E12_r8, 9.10934118523989896E12_r8,
     9  -2.05168994109344374E13_r8, 3.05651255199353206E13_r8,
     A  -3.16670885847851584E13_r8, 2.33483640445818409E13_r8,
     B  -1.23204913055982872E13_r8, 4.61272578084913197E12_r8,
     C  -1.19655288019618160E12_r8, 2.05914503232410016E11_r8,
     D  -2.18229277575292237E10_r8, 1.24700929351271032E09_r8/
      DATA C(119), C(120)/
     1  -2.91883881222208134E07_r8, 1.18838426256783253E05_r8/
C***FIRST EXECUTABLE STATEMENT  ZUNIK
      IF (INIT.NE.0) GO TO 40
C-----------------------------------------------------------------------
C     INITIALIZE ALL VARIABLES
C-----------------------------------------------------------------------
      RFN = 1.0_r8/FNU
C-----------------------------------------------------------------------
C     OVERFLOW TEST (ZR/FNU TOO SMALL)
C-----------------------------------------------------------------------
      TEST = D1MACH(1)*1.0E3_r8
      AC = FNU*TEST
      IF (ABS(ZRR).GT.AC .OR. ABS(ZRI).GT.AC) GO TO 15
      ZETA1R = 2.0_r8*ABS(LOG(TEST))+FNU
      ZETA1I = 0.0_r8
      ZETA2R = FNU
      ZETA2I = 0.0_r8
      PHIR = 1.0_r8
      PHII = 0.0_r8
      RETURN
   15 CONTINUE
      TR = ZRR*RFN
      TI = ZRI*RFN
      SR = CONER + (TR*TR-TI*TI)
      SI = CONEI + (TR*TI+TI*TR)
      CALL ZSQRT(SR, SI, SRR, SRI)
      STR = CONER + SRR
      STI = CONEI + SRI
      CALL ZDIV(STR, STI, TR, TI, ZNR, ZNI)
      CALL ZLOG(ZNR, ZNI, STR, STI, IDUM)
      ZETA1R = FNU*STR
      ZETA1I = FNU*STI
      ZETA2R = FNU*SRR
      ZETA2I = FNU*SRI
      CALL ZDIV(CONER, CONEI, SRR, SRI, TR, TI)
      SRR = TR*RFN
      SRI = TI*RFN
      CALL ZSQRT(SRR, SRI, CWRKR(16), CWRKI(16))
      PHIR = CWRKR(16)*CON(IKFLG)
      PHII = CWRKI(16)*CON(IKFLG)
      IF (IPMTR.NE.0) RETURN
      CALL ZDIV(CONER, CONEI, SR, SI, T2R, T2I)
      CWRKR(1) = CONER
      CWRKI(1) = CONEI
      CRFNR = CONER
      CRFNI = CONEI
      AC = 1.0_r8
      L = 1
      DO 20 K=2,15
        SR = ZEROR
        SI = ZEROI
        DO 10 J=1,K
          L = L + 1
          STR = SR*T2R - SI*T2I + C(L)
          SI = SR*T2I + SI*T2R
          SR = STR
   10   CONTINUE
        STR = CRFNR*SRR - CRFNI*SRI
        CRFNI = CRFNR*SRI + CRFNI*SRR
        CRFNR = STR
        CWRKR(K) = CRFNR*SR - CRFNI*SI
        CWRKI(K) = CRFNR*SI + CRFNI*SR
        AC = AC*RFN
        TEST = ABS(CWRKR(K)) + ABS(CWRKI(K))
        IF (AC.LT.TOL .AND. TEST.LT.TOL) GO TO 30
   20 CONTINUE
      K = 15
   30 CONTINUE
      INIT = K
   40 CONTINUE
      IF (IKFLG.EQ.2) GO TO 60
C-----------------------------------------------------------------------
C     COMPUTE SUM FOR THE I FUNCTION
C-----------------------------------------------------------------------
      SR = ZEROR
      SI = ZEROI
      DO 50 I=1,INIT
        SR = SR + CWRKR(I)
        SI = SI + CWRKI(I)
   50 CONTINUE
      SUMR = SR
      SUMI = SI
      PHIR = CWRKR(16)*CON(1)
      PHII = CWRKI(16)*CON(1)
      RETURN
   60 CONTINUE
C-----------------------------------------------------------------------
C     COMPUTE SUM FOR THE K FUNCTION
C-----------------------------------------------------------------------
      SR = ZEROR
      SI = ZEROI
      TR = CONER
      DO 70 I=1,INIT
        SR = SR + TR*CWRKR(I)
        SI = SI + TR*CWRKI(I)
        TR = -TR
   70 CONTINUE
      SUMR = SR
      SUMI = SI
      PHIR = CWRKR(16)*CON(2)
      PHII = CWRKI(16)*CON(2)
      RETURN
      END
! 22Jun2000 fgtok -s r8_precision.sub "r8con.csh conversion"
! 22Jun2000 fgtok
! 22Jun2000 fgtok
